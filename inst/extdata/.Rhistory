system.file("doc", "FullMan.pdf", package = "inveRsion")
fake.vignette <- function( file = system.file( "doc", vignette, package = package ), vignette, package, topic = vignette ){#
#
        structure( pdf = file, topic = topic, class = "vignette" )#
}
vin<-fake.vignette(system.file("doc", "FullMan.pdf", package = "inveRsion"),"FullMan.pdf")
vin<-fake.vignette(system.file("doc", "FullMan.pdf", package = "inveRsion"),"FullMan")
fake.vignette <- function( file = system.file( "doc", vignette, package = package ), vignette, package, topic = vignette ){#
#
        structure( pdf = file, topic = topic, class = "vignette" )#
}
fake.vignette("FullMan")
fake.vignette(v="FullMan")
ff<- system.file( "doc", "FullMan", inveRsion )
ff<- system.file( "doc", "FullMan", "inveRsion" )
ff
ff<- system.file( "doc", "FullMan", p="inveRsion" )
ff
ff<- system.file("doc", "FullMan.pdf", package = "inveRsion")
ff
structure( pdf = ff, topic = "FullMan.pdf", class = "vignette" )
structure( pdf = ff, topic = "FullMan", class = "vignette" )
structure.vignette
structure(ff, topic = "FullMan", class = "vignette" )
vignette(all=TRUE)
v1 <- vignette("grid")
v1
structure("FullMan",pdf=ff, topic = "FullMan", class = "vignette" )
ff
structure(pdf=ff, topic = "FullMan", class = "vignette" )
    pdf = system.file("doc/FullMan.pdf",package="inveRsion")
pdf
 if (.Platform$OS.type == "windows") {#
     shell.exec(pdf)#
   }else{#
   system(paste(shQuote(getOption("pdfviewer")), shQuote(pdf)),#
             wait = FALSE)
}
manual<-function()#
   {#
     pdf<-system.file("doc/FullMan.pdf",package="inveRsion")#
#
     if (.Platform$OS.type == "windows") {#
       shell.exec(pdf)#
     }else{#
     system(paste(shQuote(getOption("pdfviewer")), shQuote(pdf)),#
              wait = FALSE)#
    }          #
   }
manual()
library(inveRsion)
cat("Library built under R version: 2.10.1 \n")#
    cat("\n 'n") #
    cat("Hola!\n") #
    cat("welcome to inevRsion package. \n \n \n")#
    cat("type: manual() for full manual \n      or vignette(\"inveRsionMan\") for a quick introduction")
	cat("Library built under R version: 2.10.1 \n")#
    cat("\n \n") #
    cat("Hola!\n") #
    cat("welcome to inevRsion package. \n \n \n")#
    cat("type: manual() for full manual \n     vignette(\"inveRsionMan\") for a quick introduction")
    cat("type: manual() for full manual \n      vignette(\"inveRsionMan\") for a quick introduction")
library(inveRsion)
manual()
library(inveRsion)
manual()
library(inveRsion)
data(hapCode)
data("hapCode")
library(inveRsion)
data(scanRes)
data(hapCode)
invList<-listInv(scanRes,hapCode=hapCode,geno=FALSE,all=FALSE,thBic=1500)
invList<-listInv(scanRes,hapCode=hapCode,geno=FALSE,all=FALSE,thBic=0)
scanRes
hapCode
object<-scanRes
geno<-FALSE
all<-FALSE
thBic<-0
 leftCoorb1b2<-object@leftBP #
          a<-getInv(object,thBic=thBic,rnd=FALSE)
a
    results<-list()#
            #
          if(is.matrix(ROI))#
          {#
            LCinf<-ROI[,1]#
            LCsup<-ROI[,2]#
            nROI<-NROW(ROI)#
          }else{#
            LCinf<-ROI[1]#
            LCsup<-ROI[2]#
            nROI<-1#
          }
ROI<-getROIs(scanRes)
ROI
    results<-list()#
            #
          if(is.matrix(ROI))#
          {#
            LCinf<-ROI[,1]#
            LCsup<-ROI[,2]#
            nROI<-NROW(ROI)#
          }else{#
            LCinf<-ROI[1]#
            LCsup<-ROI[2]#
            nROI<-1#
          }
bp<-1
     #
              message("\n")#
              message("  doing ROI: ", bp)#
              #
              #select scanned segments in the ROI#
              selbp<-a[,1]>=LCinf[bp] & a[,1]<=LCsup[bp]#
             #
              P<-a[selbp,4]#
              LB<-a[selbp,1]#
              RB<-a[selbp,2]#
                                                              #
              #select models for consistent prediction of subject scan                                                                                                                                                                                                                                                                                                                                                                                     #
              #implemented as a list so LPNT and RPNT can take a range of values and all paired combintations can be tested      #
                #
              if(!all) #fix window#
              {#
                 ss<-leftCoorb1b2>=min(LB) & leftCoorb1b2<=max(RB)#
              }else{#
                if(min(RB)<max(LB))#
                {        #
                   slb<-leftCoorb1b2>=min(LB) & leftCoorb1b2<=min(RB)#
                   srb<-leftCoorb1b2>=max(LB) & leftCoorb1b2<=max(RB)#
                }else{#
                   slb<-leftCoorb1b2>=min(LB) & leftCoorb1b2<=max(LB) & leftCoorb1b2<=min(LB)+object@window/2#
                   srb<-leftCoorb1b2>=min(RB) & leftCoorb1b2<=max(RB) & leftCoorb1b2>=max(RB)-object@window/2#
              #
                }#
              #
                canLBP<-leftCoorb1b2[slb]#
                canRBP<-leftCoorb1b2[srb]#
#
                candidatePoints<-list(canLBP,canRBP)#
              #
                ss<-slb | srb#
              }
      canp<-leftCoorb1b2[ss]#
                 #
              ROIHaplo<-hapCode#
              ROIHaplo@haploCode<-hapCode@haploCode[,ss]#
#
#
              numB<-NCOL(ROIHaplo@haploCode)#
#
              ROIstr<-paste(round(min(LB),2),round(max(RB),2),sep="-")#
              ROIstr<-paste(paste("roi",ROIstr,sep=""),"txt",sep=".")#
#
              existsfile<-dir(getwd(),pattern=ROIstr)
ss
    if(length(existsfile)==0)#
              {#
                message("extracting b1b2 in ROI with ", numB," brakepoints \n")#
                ROIb1b2<-sapply(1:numB,getb1b2,ROIHaplo)#
                ROIb1b2<-matrix(ROIb1b2,ncol=2*NCOL(ROIb1b2),nrow=NROW(ROIb1b2)/2)#
                write.table(ROIb1b2,file=ROIstr,row.names=FALSE,col.names=FALSE)#
              }else{#
                message("\n")#
                message("  ROI file found")#
                ROIb1b2<-read.table(ROIstr,header=FALSE)#
                ROIb1b2<-as.matrix(ROIb1b2)#
              }
all
    if(all)  #
                invResults<-iterateInversionModel(ROIb1b2,window=object@window,maxSteps=30,geno,canp,canp,candidatePoints)#
              else#
                invResults<-iterateInversionModel(ROIb1b2,window=object@window,maxSteps=30,geno,canp,canp,getInvclass=TRUE)
geno
                invResults<-iterateInversionModel(ROIb1b2,window=object@window,maxSteps=30,geno,canp,canp,getInvclass=TRUE)
source("/Users/alejandro/R/inveRsion/R/inveRsion/R/scanClass.R")
                invResults<-iterateInversionModel(ROIb1b2,window=object@window,maxSteps=30,geno,canp,canp,getInvclass=TRUE)
geno
canp
                invResults<-iterateInversionModel(ROIb1b2,window=object@window,maxSteps=30,geno,canp,canp,getInvclass=TRUE)
invResults
ROIb1b2
dim(ROI)
dim(ROIb1b2)
canp
leftCoorb1b2
          leftCoorb1b2<-object@leftBP
leftCoorb1b2
          leftCoorb1b2<-object@rightBP
leftCoorb1b2
          leftCoorb1b2<-sort(union(object@leftBP,object@rightBP))
leftCoorb1b2
library(inveRsion)
data(scanRes)
data(hapCode)
invList<-listInv(scanRes,hapCode=hapCode,geno=FALSE,all=FALSE,thBic=1500)
invList
data(scanRes)
scanRes
plot(scanRes)
plot(scanRes,which="b")
plot(scanRes,which="l")
plot(scanRes,which="p")
plot(scanRes,which="b")
a<-getInv(scanRes)
a
library(inveRsion)
data(scanRes)
plot(scanRes)
library(inveRsion)
data(scanRes)
scanRes
plot(scanRes)
plot(scanRes,which="bic",thBic=0)
library(inveRsion)
manual()
library(inveRsion)
hap <- system.file("data", "haplotypesROI.dat", package = "inveRsion")
hapCode<-codeHaplo(blockSize=5,file=hap,#
                                        minAllele=0.3,saveRes=TRUE)
window<-0.5#
scanRes<-scanInv(hapCode,window=window,saveRes=TRUE)
scanRes
plot(scanRes)
plot(scanRes,which="bic",thBic=-Inf)
plot(scanRes,which="like",thBic=-Inf)
plot(scanRes,which="l",thBic=-Inf)
plot(scanRes,which="p",thBic=-Inf)
invList<-listInv(scanRes,hapCode=hapCode,geno=FALSE,all=FALSE)#
invList
plot(invList,wROI=1)
listInv()
listInv
plot(invList,wROI=1)
plot(invList)
mem <- system.file("data", "mem.txt", package = "inveRsion")
mem
ac<-accBic(invList,classFile=mem,nsub=1000,npoints=10)
plot(ac)
acc
ac
r<-getClassif(invList,thBic=2000)
r
r[1:10]
r<-getClassif(invList,thBic=2000, wROI=1)
r
manual()
library(inveRsion)
vignette("inveRsion")
library(inveRsion)
manual()
 pdf<-system.file("doc/Manual.pdf",package="inveRsion")
##begin copy ###samples from the Normal distributionx <- rnorm(1000) #gets histogram infohx <- hist(x, breaks=100, plot=FALSE) #display plot with coloursplot(hx, col=ifelse(abs(hx$breaks) < 1.669, 4, 2))##end copy
12*12/37/37
4/37
library(inveRsion)
manual()
vignette("inveRsion")
manual()
library(inveRsion)
manual()
vignette("inveRsion")
library(inveRsion )
hap <- system.file("data", "haplotypesROI.txt", package = "inveRsion")
hapCode <- codeHaplo(blockSize = 5, file = hap, minAllele = 0.3,+ saveRes = TRUE)
hapCode <- codeHaplo(blockSize = 5, file = hap, minAllele = 0.3,saveRes = TRUE)
hapCode
attr(hapCode@HaploCod,"lociSel")
attr(hapCode@HaploCode,"lociSel")
hapCode@HaploCode
hapCode@haploCode
dim(hapCode@haploCode)
length(attr(hapCode@haploCode,"lociPos"))
length(attr(hapCode@haploCode,"lociSos"))
length(attr(hapCode@haploCode,"lociSel"))
mm<-read.table(file=hap)
dim(mm)
ls<-attr(hapCode@haploCode,"lociSel")
ls
hapCode@BlockSize
hapCode
hapCode@blockSize
library(inveRsion)
hap <- system.file("data", "haplotypesROI.txt", package = "inveRsion")
hapCode <- codeHaplo(blockSize = 5, file = hap, minAllele = 0.3, saveRes = TRUE)
window <- 0.5
scanRes <- scanInv(hapCode, window = window, saveRes = TRUE)
scanRes
invList <- listInv(scanRes, hapCode = hapCode, geno = FALSE,all = FALSE, thBic = 0)
invList
hapCode
invList <- listInv(scanRes, hapCode = hapCode, geno = FALSE,all = FALSE, thBic = 0)
library(inveRsion)
hap <- system.file("data", "haplotypesROI.txt", package = "inveRsion")
hapCode <- codeHaplo(blockSize = 5, file = hap, minAllele = 0.3,saveRes = TRUE)
window <- 0.5
scanRes <- scanInv(hapCode, window = window, saveRes = TRUE)
scanRes
invList <- listInv(scanRes, hapCode = hapCode, geno = FALSE, all = FALSE, thBic = 0)
invList
plot(invList, wROI = 1)
mem <- system.file("data", "mem.txt", package = "inveRsion")
ac <- accBic(invList, classFile = mem, nsub = 1000, npoints = 10)
ac
vignette("inveRsion")
qnorm
library(MLPAsts)
a
library(MLPAstats)
gui.mlpa()
Sys.setenv(DISPLAY=":0")
library(MLPAstats)
Sys.setenv(DISPLAY=":0")
library(MLPAstats)
gui.mlpa()
data(BRCA)
ls()
size
z <- 1472562988
as.POSIXct(z, origin="1960-01-01")
as.POSIXct(z, origin="1960-01-01", tz="GMT")
as.POSIXct(z, origin=ISOdatetime(1960,1,1,0,0,0))
ISOdatetime(1960,1,1,0,0,0)
as.POSIXlt(Sys.time(), "America/New_York")
z
as.POSIXct(c(z,z+1), origin=ISOdatetime(1960,1,1,0,0,0))
as.POSIXct(c(z,z+1,z+60), origin=ISOdatetime(1960,1,1,0,0,0))
library(inveRsion)
manual()
vignette(inveRsion)
vignette("inveRsion")
a <- list(a = 1:5, b = rnorm(10), test = runif(100))
a
lang2
system.file("R.h")
system.file("Rinternals.h")
coerceVector
as.vector(c(1,2))
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),#
           matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))#
colnames(x) <- c("x", "y")#
(cl <- kmeans(x, 2))
x
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),#
           matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))#
colnames(x) <- c("x", "y")#
(cl <- kmeans(x, 2))
cl$cluster
cl$centers
h<-read.table(file="haplotypesROI.txt",header=FALSE,)
dim(h)
h[1:5,1:5]
c<-h[1,]
head(c)
sel<-(c>0.7*10^6 & c<0.8*10^6) | (c>1.2*10^6 & c<1.3*10^6)
sum(sel)
length9sel0
length(sel)
write.table(h[,sel],row=FALSE,col=FALSE,quote=FALSE,file="haplotypesR.txt")
a<-as.raw(1)
a
type(a)
class(a)
a<-as.raw(c(1,1))
a
class(a)
?as.character
